; My try to define some stuff can be included from every kickstart related sources.

.SETCPU "4510"  ; Set CPU to "4510 mode"

.SEGMENT "CODE"	; for just some default segment

; Try to make it clear that we want to use zero page addressing. The intended usage:
; LDA ZP(zp_temp_byte)
; I *think* it's may be better than this syntax which is even complained by ca65 as
; a warning:   LDA <zp_temp_byte

.DEFINE ZP(n) .LOBYTE(n)

.MACRO space label,bytes
label: .res bytes
.ENDMACRO



	reset_vector = $fffc
	irq_vector = $fffe
	nmi_vector = $fffa


	hypervisor_a = $d640
	hypervisor_x = $d641
	hypervisor_y = $d642
	hypervisor_z = $d643
	hypervisor_b = $d644
	hypervisor_spl = $d645
	hypervisor_sph = $d646
	hypervisor_flags = $d647
	hypervisor_pcl = $d648
	hypervisor_pch = $d649
	hypervisor_maplolo = $d64a
	hypervisor_maplohi = $d64b
	hypervisor_maphilo = $d64c
	hypervisor_maphihi = $d64d
	hypervisor_maplomb = $d64e
	hypervisor_maphimb = $d64f
	hypervisor_cpuport00 = $d650
	hypervisor_cpuport01 = $d651
	hypervisor_iomode = $d652
	hypervisor_dmagic_srcmb = $d653
	hypervisor_dmagic_dstmb = $d654
	hypervisor_dmagic_list0 = $d655
	hypervisor_dmagic_list1 = $d656
	hypervisor_dmagic_list2 = $d657
	hypervisor_dmagic_list3 = $d658
	hypervisor_hardware_virtualisation = $d659

	; d65a
	; d65b
	; d65c

	hypervisor_vm_currentpage_lo = $d65d
	hypervisor_vm_currentpage_mid = $d65e
	hypervisor_vm_currentpage_hi = $d65f

	hypervisor_vm_pagetable = $d660
	hypervisor_vm_pagetable0_logicalpage_lo = $d660
	hypervisor_vm_pagetable0_logicalpage_hi = $d661
	hypervisor_vm_pagetable0_physicalpage_lo = $d662
	hypervisor_vm_pagetable0_physicalpage_hi = $d663
	hypervisor_vm_pagetable1_logicalpage_lo = $d664
	hypervisor_vm_pagetable1_logicalpage_hi = $d665
	hypervisor_vm_pagetable1_physicalpage_lo = $d666
	hypervisor_vm_pagetable1_physicalpage_hi = $d667
	hypervisor_vm_pagetable2_logicalpage_lo = $d668
	hypervisor_vm_pagetable2_logicalpage_hi = $d669
	hypervisor_vm_pagetable2_physicalpage_lo = $d66a
	hypervisor_vm_pagetable2_physicalpage_hi = $d66b
	hypervisor_vm_pagetable3_logicalpage_lo = $d66c
	hypervisor_vm_pagetable3_logicalpage_hi = $d66d
	hypervisor_vm_pagetable3_physicalpage_lo = $d66e
	hypervisor_vm_pagetable3_physicalpage_hi = $d66f

	hypervisor_georam_base_mb = $d670
	hypervsior_georam_block_mask = $d671

	; d672 110 010
	hypervisor_secure_mode_flags = $d672
	
	; d673
	; d674
	; d675
	; d676
	; d677
	; d678
	; d679
	; d67a
	; d67b

	hypervisor_write_char_to_serial_monitor = $d67c

	hypervisor_feature_enables = $d67d
	hypervisor_kickedup_flag = $d67e
	hypervisor_cartridge_flags = $d67e
	hypervisor_enterexit_trigger = $d67f

	; Where sector buffer maps (over = $DE00-$DFFF IO expansion space)
	sd_sectorbuffer = $DE00
	sd_address_byte0 = $D681
	sd_address_byte1 = $D682
	sd_address_byte2 = $D683
	sd_address_byte3 = $D684

	fpga_switches_low = $d6ec
	fpga_switches_high = $d6ed

	VICIV_MAGIC = $d02f

; LGB moved here
; FIXME: some stuffs are needed to be moved here, as they like a constant etc, but used at various places.
; Surely a "constant" can be IMPORT'ed as well but it's problematic espcially if it's used in LDA #... or such
; when it's need to be faked as "ZP" :-O Too confusing.

; Current file descriptors
; Each descriptor has:
;   disk id : 1 byte ($00-$07 = file open, $FF = file closed)
;   access mode : 1 byte ($00 = read only)
;   start cluster : 4 bytes
;   current cluster : 4 bytes
;   current sector in cluster : 1 byte
;   offset in sector: 2 bytes
;   file offset / $100 : 3 bytes
;

    dos_filedescriptor_max = 4
    dos_filedescriptor_offset_diskid = 0
    dos_filedescriptor_offset_mode = 1
    dos_filedescriptor_offset_startcluster = 2
    dos_filedescriptor_offset_currentcluster = 6
;
; These last three fields must be contiguous, as dos_open_current_file
; relies on it.
;
    dos_filedescriptor_offset_sectorincluster = 10
    dos_filedescriptor_offset_offsetinsector = 11
    dos_filedescriptor_offset_fileoffset = 13

;
                ; WARNING: dos_readdir_read_next_entry uses carnal knowledge about the following
                ;          structure, particularly the length as calculated here:
                ;
                dos_dirent_structure_length =  64+1+11+4+4+1

dos_max_disks = 6

dos_errorcode_invalid_address = $10
dos_errorcode_read_timeout = $07

syspart_error_nosyspart = $ff

