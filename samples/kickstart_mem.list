ca65 V2.15
Main file   : kickstart_mem.a65
Current file: kickstart_mem.a65

000000r 1               .INCLUDE "kickstart.i65"
000000r 2               ; My try to define some stuff can be included from every kickstart related sources.
000000r 2               
000000r 2               .SETCPU	"4510"	; Set CPU to "4510 mode"
000000r 2               
000000r 2               
000000r 2               ; Try to make it clear that we want to use zero page addressing. The intended usage:
000000r 2               ; LDA ZP(zp_temp_byte)
000000r 2               ; I *think* it's may be better than this syntax which is even complained by ca65 as
000000r 2               ; a warning:   LDA <zp_temp_byte
000000r 2               
000000r 2               .DEFINE ZP(n) .LOBYTE(n)
000000r 2               
000000r 2               .MACRO space label,bytes
000000r 2               label: .res bytes
000000r 2               .ENDMACRO
000000r 2               
000000r 2               
000000r 1               .INCLUDE "kickstart_machine.a65"
000000r 2               
000000r 2               	reset_vector = $fffc
000000r 2               	irq_vector = $fffe
000000r 2               	nmi_vector = $fffa
000000r 2               
000000r 2               
000000r 2               	hypervisor_a = $d640
000000r 2               	hypervisor_x = $d641
000000r 2               	hypervisor_y = $d642
000000r 2               	hypervisor_z = $d643
000000r 2               	hypervisor_b = $d644
000000r 2               	hypervisor_spl = $d645
000000r 2               	hypervisor_sph = $d646
000000r 2               	hypervisor_flags = $d647
000000r 2               	hypervisor_pcl = $d648
000000r 2               	hypervisor_pch = $d649
000000r 2               	hypervisor_maplolo = $d64a
000000r 2               	hypervisor_maplohi = $d64b
000000r 2               	hypervisor_maphilo = $d64c
000000r 2               	hypervisor_maphihi = $d64d
000000r 2               	hypervisor_maplomb = $d64e
000000r 2               	hypervisor_maphimb = $d64f
000000r 2               	hypervisor_cpuport00 = $d650
000000r 2               	hypervisor_cpuport01 = $d651
000000r 2               	hypervisor_iomode = $d652
000000r 2               	hypervisor_dmagic_srcmb = $d653
000000r 2               	hypervisor_dmagic_dstmb = $d654
000000r 2               	hypervisor_dmagic_list0 = $d655
000000r 2               	hypervisor_dmagic_list1 = $d656
000000r 2               	hypervisor_dmagic_list2 = $d657
000000r 2               	hypervisor_dmagic_list3 = $d658
000000r 2               	hypervisor_hardware_virtualisation = $d659
000000r 2               
000000r 2               	; d65a
000000r 2               	; d65b
000000r 2               	; d65c
000000r 2               
000000r 2               	hypervisor_vm_currentpage_lo = $d65d
000000r 2               	hypervisor_vm_currentpage_mid = $d65e
000000r 2               	hypervisor_vm_currentpage_hi = $d65f
000000r 2               
000000r 2               	hypervisor_vm_pagetable = $d660
000000r 2               	hypervisor_vm_pagetable0_logicalpage_lo = $d660
000000r 2               	hypervisor_vm_pagetable0_logicalpage_hi = $d661
000000r 2               	hypervisor_vm_pagetable0_physicalpage_lo = $d662
000000r 2               	hypervisor_vm_pagetable0_physicalpage_hi = $d663
000000r 2               	hypervisor_vm_pagetable1_logicalpage_lo = $d664
000000r 2               	hypervisor_vm_pagetable1_logicalpage_hi = $d665
000000r 2               	hypervisor_vm_pagetable1_physicalpage_lo = $d666
000000r 2               	hypervisor_vm_pagetable1_physicalpage_hi = $d667
000000r 2               	hypervisor_vm_pagetable2_logicalpage_lo = $d668
000000r 2               	hypervisor_vm_pagetable2_logicalpage_hi = $d669
000000r 2               	hypervisor_vm_pagetable2_physicalpage_lo = $d66a
000000r 2               	hypervisor_vm_pagetable2_physicalpage_hi = $d66b
000000r 2               	hypervisor_vm_pagetable3_logicalpage_lo = $d66c
000000r 2               	hypervisor_vm_pagetable3_logicalpage_hi = $d66d
000000r 2               	hypervisor_vm_pagetable3_physicalpage_lo = $d66e
000000r 2               	hypervisor_vm_pagetable3_physicalpage_hi = $d66f
000000r 2               
000000r 2               	hypervisor_georam_base_mb = $d670
000000r 2               	hypervsior_georam_block_mask = $d671
000000r 2               
000000r 2               	; d672 110 010
000000r 2               	hypervisor_secure_mode_flags = $d672
000000r 2               
000000r 2               	; d673
000000r 2               	; d674
000000r 2               	; d675
000000r 2               	; d676
000000r 2               	; d677
000000r 2               	; d678
000000r 2               	; d679
000000r 2               	; d67a
000000r 2               	; d67b
000000r 2               
000000r 2               	hypervisor_write_char_to_serial_monitor = $d67c
000000r 2               
000000r 2               	hypervisor_feature_enables = $d67d
000000r 2               	hypervisor_kickedup_flag = $d67e
000000r 2               	hypervisor_cartridge_flags = $d67e
000000r 2               	hypervisor_enterexit_trigger = $d67f
000000r 2               
000000r 2               	; Where sector buffer maps (over = $DE00-$DFFF IO expansion space)
000000r 2               	sd_sectorbuffer = $DE00
000000r 2               	sd_address_byte0 = $D681
000000r 2               	sd_address_byte1 = $D682
000000r 2               	sd_address_byte2 = $D683
000000r 2               	sd_address_byte3 = $D684
000000r 2               
000000r 2               	fpga_switches_low = $d6ec
000000r 2               	fpga_switches_high = $d6ed
000000r 2               
000000r 2               	VICIV_MAGIC = $d02f
000000r 2               
000000r 2               ; LGB moved here
000000r 2               
000000r 2               ; Current file descriptors
000000r 2               ; Each descriptor has:
000000r 2               ;   disk id : 1 byte ($00-$07 = file open, $FF = file closed)
000000r 2               ;   access mode : 1 byte ($00 = read only)
000000r 2               ;   start cluster : 4 bytes
000000r 2               ;   current cluster : 4 bytes
000000r 2               ;   current sector in cluster : 1 byte
000000r 2               ;   offset in sector: 2 bytes
000000r 2               ;   file offset / $100 : 3 bytes
000000r 2               ;
000000r 2               
000000r 2                   dos_filedescriptor_max = 4
000000r 2                   dos_filedescriptor_offset_diskid = 0
000000r 2                   dos_filedescriptor_offset_mode = 1
000000r 2                   dos_filedescriptor_offset_startcluster = 2
000000r 2                   dos_filedescriptor_offset_currentcluster = 6
000000r 2               ;
000000r 2               ; These last three fields must be contiguous, as dos_open_current_file
000000r 2               ; relies on it.
000000r 2               ;
000000r 2                   dos_filedescriptor_offset_sectorincluster = 10
000000r 2                   dos_filedescriptor_offset_offsetinsector = 11
000000r 2                   dos_filedescriptor_offset_fileoffset = 13
000000r 2               
000000r 2               ;
000000r 2                               ; WARNING: dos_readdir_read_next_entry uses carnal knowledge about the following
000000r 2                               ;          structure, particularly the length as calculated here:
000000r 2                               ;
000000r 2                               dos_dirent_structure_length =  64+1+11+4+4+1
000000r 2               
000000r 2               dos_max_disks = 6
000000r 2               
000000r 2               dos_errorcode_invalid_address = $10
000000r 2               dos_errorcode_read_timeout = $07
000000r 2               
000000r 2               syspart_error_nosyspart = $ff
000000r 2               
000000r 2               
000000r 1               
000000r 1               .AUTOIMPORT +
000000r 1               
000000r 1               ; Display error and infinite loop on page fault
000000r 1               .EXPORT page_fault
000000r 1               page_fault:
000000r 1  20 rr rr     		jsr reset_machine_state
000003r 1  A2 rr        		ldx #<msg_pagefault
000005r 1  A0 rr        		ldy #>msg_pagefault
000007r 1  20 rr rr     		jsr printmessage
00000Ar 1  A0 00        		ldy #$00
00000Cr 1               		; Print PC
00000Cr 1  AB 49 D6     		ldz $d649
00000Fr 1  20 rr rr     		jsr printhex
000012r 1  AB 48 D6     		ldz $d648
000015r 1  20 rr rr     		jsr printhex
000018r 1               		; and MAPLO state
000018r 1  AB 4F D6     		ldz $d64f
00001Br 1  20 rr rr     		jsr printhex
00001Er 1  AB 4A D6     		ldz $d64a
000021r 1  20 rr rr     		jsr printhex
000024r 1  AB 49 D6     		ldz $d649
000027r 1  20 rr rr     		jsr printhex
00002Ar 1               
00002Ar 1  EE 20 D0     pf1:		inc $d020
00002Dr 1  4C rr rr     		jmp pf1
000030r 1               
000030r 1  50 41 47 45  msg_pagefault:        .byte "PAGE FAULT: PC=$$$$, MAP=$$.$$$$.00     "
000034r 1  20 46 41 55  
000038r 1  4C 54 3A 20  
000058r 1               
000058r 1               .EXPORT memory_trap
000058r 1               memory_trap:
000058r 1  78           	sei
000059r 1  D8           	cld
00005Ar 1  29 FE        	and #$fe
00005Cr 1  AA           	tax
00005Dr 1  7C rr rr     	jmp (memory_trap_table,x)
000060r 1               
000060r 1               memory_trap_table:
000060r 1               	; $00-$0E
000060r 1  rr rr        	.word rom_writeprotect
000062r 1  rr rr        	.word rom_writeenable
000064r 1  rr rr        	.word invalid_subfunction
000066r 1  rr rr        	.word invalid_subfunction
000068r 1  rr rr        	.word invalid_subfunction
00006Ar 1  rr rr        	.word invalid_subfunction
00006Cr 1  rr rr        	.word invalid_subfunction
00006Er 1  rr rr        	.word invalid_subfunction
000070r 1               
000070r 1               	; $10-$1E
000070r 1  rr rr        	.word invalid_subfunction
000072r 1  rr rr        	.word invalid_subfunction
000074r 1  rr rr        	.word invalid_subfunction
000076r 1  rr rr        	.word invalid_subfunction
000078r 1  rr rr        	.word invalid_subfunction
00007Ar 1  rr rr        	.word invalid_subfunction
00007Cr 1  rr rr        	.word invalid_subfunction
00007Er 1  rr rr        	.word invalid_subfunction
000080r 1               
000080r 1               	; $20-$2E
000080r 1  rr rr        	.word invalid_subfunction
000082r 1  rr rr        	.word invalid_subfunction
000084r 1  rr rr        	.word invalid_subfunction
000086r 1  rr rr        	.word invalid_subfunction
000088r 1  rr rr        	.word invalid_subfunction
00008Ar 1  rr rr        	.word invalid_subfunction
00008Cr 1  rr rr        	.word invalid_subfunction
00008Er 1  rr rr        	.word invalid_subfunction
000090r 1               
000090r 1               	; $30-$3E
000090r 1  rr rr        	.word invalid_subfunction
000092r 1  rr rr        	.word invalid_subfunction
000094r 1  rr rr        	.word invalid_subfunction
000096r 1  rr rr        	.word invalid_subfunction
000098r 1  rr rr        	.word invalid_subfunction
00009Ar 1  rr rr        	.word invalid_subfunction
00009Cr 1  rr rr        	.word invalid_subfunction
00009Er 1  rr rr        	.word invalid_subfunction
0000A0r 1               
0000A0r 1               	; $40-$4E
0000A0r 1  rr rr        	.word invalid_subfunction
0000A2r 1  rr rr        	.word invalid_subfunction
0000A4r 1  rr rr        	.word invalid_subfunction
0000A6r 1  rr rr        	.word invalid_subfunction
0000A8r 1  rr rr        	.word invalid_subfunction
0000AAr 1  rr rr        	.word invalid_subfunction
0000ACr 1  rr rr        	.word invalid_subfunction
0000AEr 1  rr rr        	.word invalid_subfunction
0000B0r 1               
0000B0r 1               	; $50-$5E
0000B0r 1  rr rr        	.word invalid_subfunction
0000B2r 1  rr rr        	.word invalid_subfunction
0000B4r 1  rr rr        	.word invalid_subfunction
0000B6r 1  rr rr        	.word invalid_subfunction
0000B8r 1  rr rr        	.word invalid_subfunction
0000BAr 1  rr rr        	.word invalid_subfunction
0000BCr 1  rr rr        	.word invalid_subfunction
0000BEr 1  rr rr        	.word invalid_subfunction
0000C0r 1               
0000C0r 1               	; $60-$6E
0000C0r 1  rr rr        	.word invalid_subfunction
0000C2r 1  rr rr        	.word invalid_subfunction
0000C4r 1  rr rr        	.word invalid_subfunction
0000C6r 1  rr rr        	.word invalid_subfunction
0000C8r 1  rr rr        	.word invalid_subfunction
0000CAr 1  rr rr        	.word invalid_subfunction
0000CCr 1  rr rr        	.word invalid_subfunction
0000CEr 1  rr rr        	.word invalid_subfunction
0000D0r 1               
0000D0r 1               	; $70-$7E
0000D0r 1  rr rr        	.word invalid_subfunction
0000D2r 1  rr rr        	.word invalid_subfunction
0000D4r 1  rr rr        	.word invalid_subfunction
0000D6r 1  rr rr        	.word invalid_subfunction
0000D8r 1  rr rr        	.word invalid_subfunction
0000DAr 1  rr rr        	.word invalid_subfunction
0000DCr 1  rr rr        	.word invalid_subfunction
0000DEr 1  rr rr        	.word invalid_subfunction
0000E0r 1               
0000E0r 1               rom_writeenable:
0000E0r 1  A9 04        	lda #$04
0000E2r 1  1C 7D D6     	trb hypervisor_feature_enables
0000E5r 1  4C rr rr     	jmp return_from_trap_with_success
0000E8r 1               
0000E8r 1               rom_writeprotect:
0000E8r 1  A9 04        	lda #$04
0000EAr 1  0C 7D D6     	tsb hypervisor_feature_enables
0000EDr 1  4C rr rr     	jmp return_from_trap_with_success
0000F0r 1               
0000F0r 1               
