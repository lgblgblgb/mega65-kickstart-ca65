MEMORY {
	# Hypervisor trap vectors, must be at the very beginning of the hypervisor memory @ $8000
	TRAPAREA: start = $8000, size = $200 - 8,      type = ro, file = %O, define = yes, fill = yes, fillval = $00;
	# "Then we have relocated CPU vectors at $81F8-$81FF" (quote from kickstart.a65)
	VECAREA:  start = $81F8, size = 8,             type = ro, file = %O, define = yes, fill = yes, fillval = $00;
	# Generic, not position dependent stuff
	GENAREA:  start = $8200, size = $BB00 - $8200, type = rw, file = %O, define = yes, fill = yes, fillval = $00;
	# ???? NO IDEA WHAT IS IT. "dos_disk_table" was here in kickstart.a65
	BB00AREA: start = $BB00, size = $C0,           type = rw, file = %O, define = yes, fill = yes, fillval = $00;
	BBC0AREA: start = $BBC0, size = $100 - $C0,    type = rw, file = %O, define = yes, fill = yes, fillval = $00;
	# Hypervisor DOS work area and scratch pad at $BC00-$BCFF
	BC00AREA: start = $BC00, size = $100,          type = rw, file = %O, define = yes, fill = yes, fillval = $00;
	# Reserved space for Hypervisor Process work area at $BD00-$BDFF
	BD00AREA: start = $BD00, size = $80,          type = rw, file = %O, define = yes, fill = yes, fillval = $00;
	BD80AREA: start = $BD80, size = $80,          type = rw, file = %O, define = yes, fill = yes, fillval = $3D;
	# Reserved space for Kickstart stack (8-bit) at $BE00-$BEFF
	BE00AREA: start = $BE00, size = $100,          type = rw, file = %O, define = yes, fill = yes, fillval = $3E;
	# Reserved space for Kickstart ZP at at $BF00-$BFFF
	BF00AREA: start = $BF00, size = $100,          type = rw, file = %O, define = yes, fill = yes, fillval = $3F;

	CE00AREA: start = $CE00, size = $100, type = rw;
}



SEGMENTS {
	TRAP:     load = TRAPAREA, type = ro, define = yes;
	VEC:      load = VECAREA,  type = ro, define = yes;
	# CODE/RODATA/DATA is just an arbitary choice, as the same area is used.
	# clearly, it would be enough to have a single segment, but in this way,
	# things are much more separated, ie: even in source having some messages/etc
	# everywhere between code fragments, in output binary they can be nicely
	# separated, maybe easier for disasm or whatever it needs at all.
	# (except for inlined messages and such for sure!!!!)
	CODE:     load = GENAREA,  type = ro, define = yes;
	RODATA:   load = GENAREA,  type = ro, define = yes;
	DATA:     load = GENAREA,  type = rw, define = yes;
	# Not so much used, but anyway, I guess ld65 would even complain on an unused memory area not referenced by any segment?
	STACK:    load = BE00AREA, type = rw, define = yes;
	# That's tricky, and major problem with generic 65xx assembler design, when
	# ZP is not really a ZP, more like a BP. This will cause ca65 be in trouble
	# if you try to use zero page addressing, but at least there is an error message
	# this way. If we degine zeropage as a "faked old thing" (with @ memory area zero)
	# it would work, however a mistake to use absolute addressing opcode with them,
	# and we mess things up at the wrong place!
	ZEROPAGE: load = BF00AREA, type = zp, define = yes;

	BB00SEG: load = BB00AREA, type = rw, define = yes;
	BBC0SEG: load = BBC0AREA, type = rw, define = yes;
	BC00SEG: load = BC00AREA, type = rw, define = yes;
	BD00SEG: load = BD00AREA, type = rw, define = yes;
	BD80SEG: load = BD80AREA, type = rw, define = yes;
	

	CE00STUFF: load = CE00AREA, type = bss, define = yes;
}

