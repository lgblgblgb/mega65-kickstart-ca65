.INCLUDE "kickstart.i65"
.INCLUDE "kickstart_machine.a65"

.AUTOIMPORT +

.SEGMENT "CODE"


;
; MEGA65 System Partition functions
;
; The system partition (type = $41 = 65) holds several major data areas:
;
; 1. Header, that identifies the version and structure of the system partition.
;
; 2. Frozen programs for task switching.
;    (Some of which may be reserved by the operating system, e.g., for alarms
;     and other special purposes.)
;
; 3. Installed services that can be requested via the Hypervisor.
;    These are internally just frozen programs with a valid service description
;    header.
;

	syspart_error_readerror = $01
	syspart_error_badmagic  = $42
	;syspart_error_nosyspart = $ff

; HEADER - First sector of partition
; $000-$00A "MEGA65SYS00" - Magic string and version indication
; $010-$017 Start and size (in sectors) of frozen program area
; $018-$01b Size of each frozen program slot
; $01c-$01d Number of frozen program slots
; $01e-$01f Number of sectors used for frozen program directory
; $020-$027 Start and size (in sectors) or installed services
; $028-$02b Size of each installed service slot
; $02c-$02d Number of service slots
; $02e-$02f Number of sectors used for slot directory
; $030-$1ff RESERVED
;
; Basically we have two main areas in the system partition for frozen programs,
; and for each we have a directory that allows for quick scanning of the lists.
; Thee goal is to reduce the number of random seeks (which still have a cost on
; SD cards, because commencing a read is much slower than continuing one), and
; also the amount of data required.
; To this end the directory entries consist of a 64 byte name field and a 64
; byte reserved field, so that each is 128 bytes in total, allowing 4 per 512
; byte sector.
; If the first byte of a direectory is $00, then the entry is assumed to be free.

.EXPORT syspart_open
syspart_open:
	; Open a system partition.
	; At this point, only syspart_start_sector and
	; syspart_size_in_sectors have been initialised.

	; Read First sector of system partition
	ldx #$03
spo1:	lda syspart_start_sector,x
	sta $d681,x
	dex
	bpl spo1
	jsr sd_fix_sectornumber
	
	lda #syspart_error_readerror
	sta syspart_error_code
	jsr sd_readsector
	bcc syspart_openerror

	; Got First sector of system partition.

	; Check magic string
	lda #syspart_error_badmagic
	sta syspart_error_code
	ldx #10
spo2:	lda $de00,x
	cmp syspart_magic,x
	bne syspart_openerror
	dex
	bpl spo2
	
	lda #$00
	sta syspart_error_code

	; Copy bytes from offset $10 - $2F into syspart_structure
	; XXX It is assumed that these fields are aligned with each other
	ldx #$10
spo3:	lda $de00,x
	sta syspart_structure,x
	inx
	cpx #$30
	bne spo3

	; Display info about # of freeze and service slots
	ldx #<msg_syspart_info
	ldy #>msg_syspart_info
	jsr printmessage
	ldy #$00
	ldz syspart_freeze_slot_count+1
	jsr printhex
	ldz syspart_freeze_slot_count+0
	jsr printhex
	ldz syspart_service_slot_count+1
	jsr printhex
	ldz syspart_service_slot_count+0
	jsr printhex

	lda #$01
	sta syspart_present

	ldx #<msg_syspart_ok
	ldy #>msg_syspart_ok
	jsr printmessage

	jsr syspart_configsector_read
	jsr syspart_configsector_apply
	bcs spo4

	ldx #<msg_syspart_config_invalid
	ldy #>msg_syspart_config_invalid
	jsr printmessage

spo4:	sec
	rts

syspart_openerror:

	; Report error opening system partition
	ldx #<msg_syspart_open_error
	ldy #>msg_syspart_open_error
	jsr printmessage
	ldy #$00
	ldz syspart_error_code
	jsr printhex
	ldz #$00

	clc
	rts

; XXX These should return success/failure indication
syspart_configsector_read_trap:
	jsr syspart_configsector_read
	sta hypervisor_enterexit_trigger

syspart_configsector_write_trap:
	jsr syspart_configsector_write
	sta hypervisor_enterexit_trigger

syspart_configsector_set_trap:
	jsr syspart_configsector_set
	sta hypervisor_enterexit_trigger

syspart_configsector_apply_trap:
	jsr syspart_configsector_apply
	sta hypervisor_enterexit_trigger

syspart_locate_freezeslot_trap:
	ldx hypervisor_x
	jsr syspart_locate_freezeslot
	sta hypervisor_enterexit_trigger

.EXPORT syspart_locate_freezeslot
syspart_locate_freezeslot:
	; Get the first sector of a given freeze slot
	; X = low byte of slot #
	; Y = high byte of slot #

	phx
	phy

	; Check that we have a system partition
	lda syspart_present
	bne splf1
	lda #syspart_error_nosyspart
	sta syspart_error_code
	rts
splf1:
	jsr syspart_locate_freezeslot_0
	; Now add freeze slot size x (YYXX) bytes
	; This is needless to say a bit of a pain to calculate
	; on an 8-bit integer-only CPU.  Our long-planned
	; Integer Processing Unit (IPU) would be welcome exactly
	; now, so that we could load in the multiplication inputs
	; and read the outputs a convenient few cycles later.

	; Set multiplicant inputs to multiplier
	ldx #$03
splf4:	lda syspart_freeze_slot_size_in_bytes,x
	sta $d780,x
	dex
	bpl splf4

	plx
	stx $d784
	ply
	sty $d785
	lda #$00
	sta $d786
	sta $d787

	; Read out answer, and add it to slot 0 address
	ldx #3
	clc
splf3:	lda $d788,x
	adc $d681,x
	sta $d681,x
	dex
	bpl splf3

	rts

syspart_locate_freezeslot_0:
	; Freeze slot #0 starts at:
	;   syspart_start_sector + syspart_freeze_area_start
	; + syspart_freeze_directory_sector_count
	lda syspart_start_sector+0
	clc
	adc syspart_freeze_area_start+0
	sta $d681
	ldx #1
splf2:	lda syspart_start_sector,x
	adc syspart_freeze_area_start,x
	sta $d681,x
	inx
	cpx #4
	bne splf2
	lda $d681
	clc
	adc syspart_freeze_directory_sector_count+0
	sta $d681
	lda $d682
	adc syspart_freeze_directory_sector_count+1
	sta $d682
	lda $d683
	adc #0
	sta $d683
	lda $d684
	adc #0
	sta $d684

	rts


syspart_configsector_set:
	ldx #3
spcr1:	lda syspart_start_sector,x
	sta $d681,x
	dex
	bpl spcr1
	jsr sd_fix_sectornumber
	jmp sd_inc_fixedsectornumber

syspart_configsector_read:
	jsr syspart_configsector_set
	jmp sd_readsector

syspart_configsector_write:
	jsr syspart_configsector_set
	lda #$03
	sta $d680
	sec
	rts

syspart_configsector_apply:
	; Check version
	lda $de00
	cmp #$01
	bne syspart_config_invalid
	lda $de01
	cmp #$01
	bne syspart_config_invalid

	; Set PAL/NTSC mode
	lda $d67f
	and #$3f
	sta $d67f
	lda $de02
	and #$c0
	ora $d67f
	sta $d67f

	; Set audio options
	lda $de03
	sta $d6f9

	; Set F011 to use 3.5" drive or disk images
	lda $de04
	sta $d6a1

	; Enable/disable Amiga mouse support (emulates 1351 mouse)
	lda $de05
	sta $d61b
	
	sec
	rts

syspart_config_invalid:	
	clc
	rts

; Magic string that identifies a MEGA65 system partition
syspart_magic:
	.byte "MEGA65SYS00"

msg_syspart_open_error:
	.byte "SYSTEM PARTITION ERROR: (ERRNO: $$)",0
msg_syspart_ok:
	.byte "SYSTEM PARTITION OK",0
msg_syspart_info:
	.byte "SYSPART: $$$$ FREEZE, $$$$ SERVICE SLOTS",0
msg_syspart_config_invalid:
	.byte "SYSPART CONFIG INVALID. PLEASE SET.",0


.EXPORT syspart_trap
syspart_trap:
	sei
	cld
	and #$fe
	tax
	jmp (syspart_trap_table,x)

syspart_trap_table:
	; $00-$0E
	.word syspart_configsector_read_trap
	.word syspart_configsector_write_trap
	.word syspart_configsector_apply_trap
	.word syspart_configsector_set_trap
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction

	; $10-$1E
	.word syspart_locate_freezeslot_trap
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction

	; $20-$2E
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction

	; $30-$3E
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction

	; $40-$4E
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction

	; $50-$5E
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction

	; $60-$6E
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction

	; $70-$7E
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
	.word invalid_subfunction
